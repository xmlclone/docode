# docker-compose up -d
# docker-compose down
# docker compose up 启动时，如果没有在yaml文件中指定 container_name，系统会默认生成 projectname-service-1 这样的容器名称
# 其中projectname一般就是项目名，如果需要修改，可以使用 -p 参数
# docker-compose -p new_prj_name up -d
# 对应的在执行其它命令，比如down时，也需要指定此参数，比如： docker compose -p new_prj_name down

# 可以直接引用已经定义好的yml文件，配置均相同，直接引入即可
include:
  - ./docker-compose-base.yml

# 定义复用的变量
x-shared-env: &shared-env
  DB_HOST: postgres
  # 当然也可以引用外部环境变量并设定默认值
  # 环境变量可以通过 -e .env 和 宿主机等几种方式传递或定义
  DB_PORT: ${DB_PORT:-5432}
  # 一般情况下，一些敏感信息可以通过.env配置（命令行启动不需要特殊处理）
  # 并通过.gitignore等文件忽略.env，保证信息安全
  POSTGRES_USER: ${DB_USER:-test}
  POSTGRES_PASSWORD: ${DB_PASSWORD:-test}
  # 注意，这里前面的变量名和后面的变量名不是同一个
  # 比如：  NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}，前面的 NGINX_SSL_PORT 是在被引用的地方，比如下面的 nginx 服务的变量名
  # 而后面的 ${NGINX_SSL_PORT:-443} 表示取外部的 NGINX_SSL_PORT 环境变量，如果没有则默认为 443
  # 结合下面 nginx 部分的解释继续查看
  NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
  NGINX_PORT: ${NGINX_PORT:-80}

version: '3.1'
services:
  nginx:
    # 同一个网络下，访问内部服务，比如nginx想访问influx，可以通过 http://influx:8086 访问
    # 注意这里的 influx 就是 services 下配置的名称，不需要特殊处理，8086 是 influx 内部端口，而非暴露的外部端口： 18086 
    image: nginx:latest
    restart: always
    # docker ps 看见的name列名称，否则docker-compose启动会增加一定的前缀或后缀
    container_name: nginx
    hostname: nginx
    depends_on:
      - postgres
      - influx
    volumes:
      # 前面是本地路径:后面是容器内路径
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
    # 假设有一个.env_prod文件包含了各种变量，也可以通过这种方式引入（还可以指定路径，比如config/.env_prod）
    # .env 这个文件是会被自动载入的，但是其它的文件名需要手动通过 env_file 配置指定  
    env_file: .env_prod
    environment:
      # 注入共享变量，注意后面如果有显示定义的环境变量会覆盖共享变量
      <<: *shared-env  
      # ${NGINX_SSL_PORT:-443} 这种格式表示使用环境变量NGINX_SSL_PORT，:-后面表示默认值
      # 即没有外部变量传入时使用，比如没有通过命令行-e参数或者宿主机环境变量或.env文件等
      # 这里重新定义了 NGINX_SSL_PORT ，而且是取了 NGINX_SSL_PORT 环境变量，如果没有则默认为 7443，和上面的共享
      # 变量默认值 443 已经没有关联
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-7443}
      # NGINX_PORT: ${NGINX_PORT:-80}  这里注释了，表示直接复用了上面共享变量 NGINX_PORT: ${NGINX_PORT:-80}
    ports:
      # 前面是暴露的外部端口号:后面是服务内部的端口号
      - '${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}'
      - '${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}'

  influx:
    image: influxdb
    restart: always
    ports:
      - 18086:8086
    volumes:
      - ./influxdb/influxdb.yml:/etc/influxdb2/config.yml
      - ./influxdb/data:/var/lib/influxdb2
    networks:
      - proxy_network
      # 注意这里的default不是docker或系统本身默认的，而是在执行时自动会生成一个 default 网络
      # 而且在 networks 定义加入这里网络的服务，均不会自动加入任何一个网络的，包括 proxy_network 和 default
      - default
      
  postgres:
    image: postgres
    restart: always
    ports:
      - 15433:5432
    volumes:
      # source和下面定义的volumes名称一致
      # target表示容器内的路径
      # 还可以简写为 oradata:/opt/postgres/oradata
      - source: oradata
        type: volume
        target: /opt/postgres/oradata
      - ./startupscripts:/opt/oracle/scripts/startup
    environment:
      <<: *shared-env  # 注入共享变量
      POSTGRES_DB: test
    networks:
      - proxy_network  # 仅支持内部访问，即可以通过 docker-compose exec influx ping postgres 验证效果
    command: -c config_file=/etc/postgresql/postgresql.conf

  redis:
    image: redis
    # 默认不启动，如果要启动，需要命令行增加参数: docker-compose up --profile redis
    profiles:
      - redis
    restart: always
    deploy:
      resources:
        limits:
          memory: 2g # 限制使用的内存大小
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - proxy_network
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf

networks:
  proxy_network:
    driver: bridge
    # 定义为内部网络，true禁止外部访问（默认是false）
    # 即如果某个服务只属于此网络，即便定义了ports暴露仍然无效；但如果属于多个网络，有网络可以外部访问才可以通过ports暴露
    internal: true

volumes:
  # 可以通过 docker-compose down -v 删除关联的卷
  # 可以通过 docker volume inspect oradata 查看宿主机挂载的路径
  oradata:
    driver: local # 这条整个配置是默认的，可以整条省略，只有上面的 orgdata: 即可